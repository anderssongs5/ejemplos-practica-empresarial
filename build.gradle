println 'Inicio ejecucion proyecto'

apply plugin: 'java'
apply plugin: 'jacoco'

// Encoding con el que se compila
[ compileJava, compileTestJava ]*.options*.encoding = 'ISO-8859-1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets{
	main {
		java {
			srcDir 'src/java/main'
		}
		resources {
			srcDir 'src/java/resources'
		}
	}
	test{
		java {
			srcDir 'src/test/java'
		}
		resources {
			srcDir 'src/test/resources'
		}
	}
}

repositories {
    mavenCentral()
}

dependencies {
	compile group:'io.reactivex', name:'rxjava', version: '1.0.14' // Libreria para programacion reactiva
	compile group:'com.google.code.gson', name: 'gson', version: '2.2.2' // Serializacion de datos
	
	// ***************** PRUEBAS AUTOMATIZADAS ***************** //
    testCompile group: 'org.powermock', name:'powermock-module-junit4', version:'1.+'
    testCompile group: 'org.powermock', name:'powermock-api-mockito', version:'1.+'
    // ***************** FIN PRUEBAS AUTOMATIZADAS ***************** //
}

jacoco {
    toolVersion = "0.7.1.201405082137"    
    reportsDir = file("$buildDir/reporte-jacoco")
}

test {
	jacoco {
		append = true
		destinationFile = file("../ejemplos-practica-empresarial/build/jacoco/jacoco.exec")
	}
}

jar {
    archiveName = "ejemplos-practica-empresarial.jar"
    manifest {
    	def dateTime = new Date() 
		attributes(
			"Implementation-Title": "Ejemplos-Practica-Empresarial",
			"Main-Class": "co.edu.udea.practicaempresarial.Aplication",
		    "Creation-Date": dateTime.toTimestamp().toString(),
            "Built-JDK": System.getProperty('java.version'),
		)
    }
		
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

compileJava.dependsOn(clean)
test.dependsOn(compileJava)
jacocoTestReport.dependsOn(test)
jar.dependsOn(jacocoTestReport)
